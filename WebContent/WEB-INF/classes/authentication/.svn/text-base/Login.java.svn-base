/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package authentication;

import blogtracker.util.User;
import blogtracker.util.UtilFunctions;
import blogtracker.util.sysResource;
import java.sql.*;
import java.util.HashMap;


//import javax.swing.*;
//import java.awt.*;

/**
 *
 * @author skumar34
 */

public class Login extends UtilFunctions{
   public sysResource sysres= new sysResource();

    public Login()
    {
            loadConstants();
            setResource();
    }

    public sysResource getSysRes() {
        return sysres;
    }
HashMap<String,String> hm = new HashMap<String,String>();
    //JFIg file load did not work
//    public String loadGlobalConstants()
//    {
//        try {
//            JFigLocatorIF locator = new blogtracker.util.LocalJFigLocator("../webapps/blazeds/WEB-INF/classes/blogtracker/gui/blogtrackers/config", "config.xml");
//            JFigIF confInstance = org.igfay.jfig.JFig.getInstance(locator);
//            return confInstance.getValue("SQLConnection","dbConnection");
//
//        } catch (JFigException ex) {
//            System.out.println("Configuration file Not found");
//        }
//        return null;
//    }

//    public String loadConstants()
//    {
//
//        BufferedReader br = null;
//        try {
//            //System.out.println(System.getProperty("user.dir"));
//            HashMap<String,String> hm = new HashMap<String,String>();
//            br = new BufferedReader(new FileReader("..\\webapps\\ROOT\\WEB-INF\\classes\\authentication\\blogtrackers.config"));
//            String temp = "";
//            while((temp = br.readLine())!=null)
//            {
//                temp = temp.trim();
//                //System.out.println(temp);
//                if(temp.isEmpty()||temp.startsWith("//"))
//                {
//                    continue;
//                }
//                else
//                {
//                    String[] arr = temp.split("##");
//                    //System.out.println(arr[0]+" "+arr[1]);
//                    if(arr.length==2)
//                    {
//                        hm.put(arr[0].trim(), arr[1].trim());
//                    }
//                }
//            }
//            if(hm.isEmpty())
//                return null;
//            else
//            {
//               return hm.get("dbConnection");
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//        }finally {
//            try {
//                br.close();
//            } catch (IOException ex) {
//                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
//        return null;
//    }

    private void setResource()
    {
        sysres.databaseConnectionString=hm.get("dbConnection");//"jdbc:sqlserver://149.169.226.79:1433;instanceName=DMMLSERVER;databaseName=blogtrackers_farsi;SelectMethod=cursor;user=trackerapp;password=number123";//"jdbc:sqlserver://localhost;instanceName=MSSQLSERVER;databaseName=blogtracker;SelectMethod=cursor;user=test;password=test";
        sysres.setPassword(hm.get("dbPassword"));
        sysres.setUsername("dbUserName");
    }

    public void addUser(String iUserName,String iPassword,String iEmail)
    {
        if(isUserExists(iUserName))
        {
           System.out.println("duplicate user");

        }
        else
        {
            String queryStr = "INSERT INTO UserCredentials VALUES(?,?,?)";
            String queryStr1 = "INSERT INTO User_Watches VALUES(?,?,?,?)";
            try{
                Connection conn = getConn();//DriverManager.getConnection(sysres.databaseConnectionString,sysres.getUsername(),sysres.getPassword());
                PreparedStatement stmt = conn.prepareStatement(queryStr);
                stmt.setString(1, iUserName);
                stmt.setString(2, iPassword);
                stmt.setString(3, iEmail);
                stmt.execute();
                stmt = conn.prepareStatement(queryStr1);
                stmt.setString(1, iUserName);
                stmt.setString(2, "");
                stmt.setString(3, iEmail);
                stmt.setInt(4, 0);
                stmt.execute();
                stmt.close();
                conn.close();
            }catch(SQLException e)
              {
                 e.printStackTrace();
              }
         }
    }

    public boolean removeUser(String iUserName)
    {
       try{

            String queryStr = "Delete FROM UserCredentials where UserName = ?";
            Connection conn = getConn();//DriverManager.getConnection(sysres.databaseConnectionString,sysres.getUsername(),sysres.getPassword());
            PreparedStatement pstmt = conn.prepareStatement(queryStr);
            pstmt.setString(1, iUserName);
           
            if(pstmt.execute())
            {
                pstmt.close();
                conn.close();
                return true;
            }
            else
            {
                pstmt.close();
                conn.close();
                return false;
            }
            
        }catch(SQLException e)
        {

            e.printStackTrace();
            return false;
        }
      //remove a user also cleanup watchlists
    }

    public boolean isUserExists(String iUserName)
    {
        try{

            String queryStr = "SELECT UserName FROM UserCredentials where Username = ?";
            //Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = getConn();//DriverManager.getConnection(sysres.databaseConnectionString,sysres.getUsername(),sysres.getPassword());
            PreparedStatement pstmt = conn.prepareStatement(queryStr);
            pstmt.setString(1, iUserName);
            //stmt = databaseConnection.createStatement();
            ResultSet rs = pstmt.executeQuery();
            if(rs.next())
            {
                rs.close();
                pstmt.close();
                conn.close();
                return true;
            }
            else
            {
                rs.close();
                pstmt.close();
                conn.close();
                return false;
            }
        }catch(SQLException e)
        {
            e.printStackTrace();
            return false;
        }
    }
   
    public sysResource loginVerify(String iUserName,String iPassword)
    {
        if(isUserExists(iUserName))
        {
            try {
                 String queryStr = "SELECT UserName,Password FROM UserCredentials where Username = ?";
                 Connection conn = getConn();//DriverManager.getConnection(sysres.databaseConnectionString);
                 PreparedStatement pstmt = conn.prepareStatement(queryStr);
                 pstmt.setString(1, iUserName);
                 //stmt = databaseConnection.createStatement();
                 ResultSet rs = pstmt.executeQuery();
                 if(rs.next())
                  {
                    if(rs.getObject(1).equals(iUserName))
                      {
                         if(rs.getObject(2).equals(iPassword))
                          {
                             rs.close();
                             pstmt.close();
                             User u = new User();
                             sysres.currentUser = u.getUser(iUserName);
                             sysres.verified = true;
                             conn.close();
                           return sysres;
                          }
                       }
                  }
                 rs.close();
                 pstmt.close();
                 conn.close();

                 }
             catch(SQLException e)
                {
                   e.printStackTrace();
                   return null;
                }
        }
        return null;  //Invalid credentials
    }

}


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package blogtracker.gui.blogtrackers;

import blogtracker.util.UtilFunctions;
import blogtracker.util.InfluentialBlogger;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.StopAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.TermFreqVector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.LockObtainFailedException;
import org.apache.lucene.store.RAMDirectory;


/**
 *
 * @author skumar34
 */
public class getInfluentialBloggers extends UtilFunctions{

    public String getPost(int postID)
    {
        //System.out.println(postID);
        String post =  getBlogPost(postID);
        return post;
    }

    public List<InfluentialBlogger> getinflbloggers(double commentWeight, double inpLinkWeight, double outLinkWeight, java.util.Date startDate, java.util.Date endDate, ArrayList<Integer> selsites)
    {
           
            try
            {
                SimpleDateFormat sdform = new java.text.SimpleDateFormat();
                sdform.applyPattern("yyyy-MM-dd");
                String selSitesQuery = getSelSitesQuery(selsites);
                Connection conn = getConn();
                Statement stmt = conn.createStatement();
                String sqlStatement = "SELECT blogpost_id, num_comments,num_outlinks,num_inlinks,post_length,blogger  FROM blogposts WHERE "+selSitesQuery+" (date >= '" +sdform.format(startDate) + "' AND date <= '" + sdform.format(endDate) + "') ORDER BY date";
                ResultSet rs = stmt.executeQuery(sqlStatement);
                ArrayList<InfluentialBlogger> bloggersList=new ArrayList<InfluentialBlogger>();

                while(rs.next())
                {
			//int postID = rs.getInt("blogpost_id");
			int comments = rs.getInt("num_comments");
			int numOutLinks = rs.getInt("num_outlinks");
			int numInLinks = rs.getInt("num_inlinks");
			int postLength = rs.getInt("post_length");
                        String bloggerName=rs.getString("blogger");
                        double lengthFactor= 0.0;
			if(postLength <= 350)
				lengthFactor = 1.0;
			if(postLength > 350 && postLength <=1500)
				lengthFactor = 2.0;
			if(postLength > 1500)
				lengthFactor = 3.0;
			double scalingFactor = lengthFactor;
			double outLinksNormalized = numOutLinks/lengthFactor;
                        //System.out.println(outLinksNormalized+" "+comments+" "+numInLinks);
			double influenceFlow = (commentWeight*comments) + (inpLinkWeight*numInLinks) -(outLinkWeight* outLinksNormalized);
			//System.out.println("influenceFlow = "+influenceFlow);
                        double influence = scalingFactor * influenceFlow;
			 boolean flagFound=false;
                        for(int i=0;i<bloggersList.size();i++)
                        {
                            if(bloggersList.get(i).getBloggerName().equalsIgnoreCase(bloggerName))//bloggersList[i].getBloggerName().equals(bloggerName))
                            {
                                bloggersList.get(i).setInfluenceScore(Math.max(bloggersList.get(i).getInfluenceScore(), influence));
                                flagFound=true;
                                break;
                            }
                        }
                        if(flagFound==false)
                        {
                            InfluentialBlogger temp= new InfluentialBlogger(bloggerName,influence);
                            bloggersList.add(temp);
                        }

                       }
                InfluentialBlogger[] finalBloggersList=new InfluentialBlogger[bloggersList.size()];
                for(int i=0;i<finalBloggersList.length;i++)
                {
                    finalBloggersList[i] = new InfluentialBlogger(bloggersList.get(i).getBloggerName(),bloggersList.get(i).getInfluenceScore());
                }
                Arrays.sort(finalBloggersList, Collections.reverseOrder());         //sort the array of objects on the basis of the frequency value.

                double maxInfluence = 0.0;
                if(finalBloggersList.length>1)
                {
                    maxInfluence = finalBloggersList[0].getInfluenceScore();
                }
                maxInfluence = Math.abs(maxInfluence);
                bloggersList.clear();
                for(int k=0;k<finalBloggersList.length;k++)
                {
                    finalBloggersList[k].setInfluenceScore(finalBloggersList[k].getInfluenceScore()/maxInfluence);
                    bloggersList.add(finalBloggersList[k]);
                }
                conn.close();
                return bloggersList;
	 }
        catch(Exception e)
        {

            e.printStackTrace();
            return null;
        }
    }

    public List<BPost> getBlogPosts(String bloggerName,java.util.Date startDate, java.util.Date endDate, ArrayList<Integer> sites)
    {
        try {
            String selSitesQuery = getSelSitesQuery(sites);
            java.text.SimpleDateFormat sdFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
            String queryStr = "Select blogpost_id, title from blogposts where " + selSitesQuery + " blogger = '" + bloggerName + "' and date>= '" + sdFormat.format(startDate) + "' and date<= '" + sdFormat.format(endDate) + "'";
            Connection conn = getConn();
            ArrayList<BPost> blogpostList=new ArrayList<BPost>();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(queryStr);
            while (rs.next()) {
                int postID = rs.getInt("blogpost_id");
                String title = rs.getString("title");
                //String categories = rs.getString("categories");
                blogpostList.add(new BPost(postID,title,"",""));
            }
            conn.close();
           return blogpostList;
        } catch (SQLException ex) {
            Logger.getLogger(getInfluentialBloggers.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    //String freqTermIndex = "C:\\indices\\index1";
    String SEARCH_INDEX;// = "C:\\Program Files (x86)\\blazeds\\tomcat\\webapps\\blazeds\\BlogTracker\\blogtrackers-index";

//     public void loadGlobalConstants()
//    {
//
//        BufferedReader br = null;
//        try {
//            //System.out.println(System.getProperty("user.dir"));
//            HashMap<String,String> hm = new HashMap<String,String>();
//            br = new BufferedReader(new FileReader("..\\webapps\\ROOT\\WEB-INF\\classes\\authentication\\blogtrackers.config"));
//            String temp = "";
//            while((temp = br.readLine())!=null)
//            {
//                temp = temp.trim();
//                //System.out.println(temp);
//                if(temp.isEmpty()||temp.startsWith("//"))
//                {
//                    continue;
//                }
//                else
//                {
//                    String[] arr = temp.split("##");
//                    //System.out.println(arr[0]+" "+arr[1]);
//                    if(arr.length==2)
//                    {
//                        hm.put(arr[0].trim(), arr[1].trim());
//                    }
//                }
//            }
//            if(!hm.isEmpty())
//            {
//                SEARCH_INDEX = hm.get("searchIndex");
//
//            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }finally {
//            try {
//                br.close();
//            } catch (IOException ex) {
//               ex.printStackTrace();
//            }
//
//        }
//
//    }

//    public void loadGlobalConstants()
//    {
//        try {
//            JFigLocatorIF locator = new blogtracker.util.LocalJFigLocator("config/", "config.xml");
//            JFigIF confInstance = org.igfay.jfig.JFig.getInstance(locator);
//            SEARCH_INDEX = confInstance.getValue("Indices", "searchIndex");
//        } catch (JFigException ex) {
//            System.out.println("Configuration file Not found");
//        }
//    }

    public tags[] getInflBlgrTags(String bloggerName, java.util.Date startDate, java.util.Date endDate, ArrayList<Integer> sites)
    {
        try {
            loadConstants();
            SEARCH_INDEX = hm.get("searchIndex");
            IndexReader idfread = IndexReader.open(SEARCH_INDEX);
            int totaldocs = idfread.numDocs();
            double idffactor = 0;
            String selSitesQuery = getSelSitesQuery(sites);
            Connection conn = getConn();
            blogtracker.util.stopWordsList.fillStopWordsList();
            Analyzer analyzer = new StopAnalyzer(blogtracker.util.stopWordsList.stopwords);
            Directory inflBloggerIndex = new RAMDirectory();
            IndexWriter writer = new IndexWriter(inflBloggerIndex, analyzer, true);
            java.text.SimpleDateFormat sdFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
            Statement stmt = conn.createStatement();
            String queryStr="Select blogpost_id, title, categories, post from blogposts where "+selSitesQuery+" blogger = '"+bloggerName+"' and date>= '"+sdFormat.format(startDate)+"' and date<= '"+sdFormat.format(endDate)+"'";
            ResultSet rSet = stmt.executeQuery(queryStr);
            String Post = "";
            while(rSet.next())
            {
                Post =Post+" "+ blogtracker.util.StringUtil.stripHTMLTags(rSet.getObject(4).toString());
            }
            Document tempDoc=new Document();
            Field docField=new Field("content",Post,Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.YES);
            tempDoc.add(docField);
            writer.addDocument(tempDoc);
            writer.close();
            IndexReader reader = IndexReader.open(inflBloggerIndex);
            TermFreqVector tfv = (TermFreqVector) reader.getTermFreqVector(0, "content");
            String[] terms = tfv.getTerms();
            int[] freqs = tfv.getTermFrequencies();
            tags[] kpoints = new tags[terms.length];
            for(int i=0;i<terms.length;i++)
            {
                kpoints[i] = new tags();
                kpoints[i].key = terms[i];
                try
                {
                    int nodocs = idfread.docFreq(new Term("content",terms[i]));
                    if(nodocs>0)
                    {
                        idffactor = Math.log10(totaldocs/(nodocs+1));
                    }
                    else
                        idffactor = 0;
                }
                catch(IOException e)
                {
                    idffactor = 1;  //if there is something wrong with the index reduce to tf.
                }
               kpoints[i].value = freqs[i]*idffactor;
            }
            Arrays.sort(kpoints,Collections.reverseOrder());
          
           return kpoints;
        } catch (SQLException ex) {
            Logger.getLogger(getInfluentialBlogPosts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CorruptIndexException ex) {
            Logger.getLogger(getInfluentialBlogPosts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LockObtainFailedException ex) {
            Logger.getLogger(getInfluentialBlogPosts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(getInfluentialBlogPosts.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
     public String formTags(String bloggerName, java.util.Date startDate, java.util.Date endDate, ArrayList<Integer> sites,int threshold)
    {
       String taghtml = "";
       tags[] phrases = getInflBlgrTags(bloggerName, startDate, endDate, sites);
       int limit = threshold;
       if(phrases.length<threshold)
           limit = phrases.length;
       int size = limit;
        int tier1 = size/3;
        for(int j=0;j<tier1;j++)
        {
            phrases[j].value = 35;
            //System.out.println(phrases[j].key+" "+phrases[j].value);
        }
        for(int j=tier1;j<tier1+tier1;j++)
        {
            phrases[j].value = 20;
            //System.out.println(phrases[j].key+" "+phrases[j].value);
        }
        for(int j=tier1+tier1;j<limit;j++)
        {
            phrases[j].value = 12;
            //System.out.println(phrases[j].key+" "+phrases[j].value);
        }
       for(int i=0;i<limit;i++)
       {
          taghtml = taghtml+ "<a href=\"\"><font size=\""+phrases[i].value+ "\">"+phrases[i].key+"</font></a> ";
       }
       
       return taghtml;
    }

}

